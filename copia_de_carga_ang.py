# -*- coding: utf-8 -*-
"""Copia de Carga_ang.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OeqLsLaseazJ-M4gMtw8-LvpKClwWqFR

# Carga Modelos de regresión

**Autor/es:**
+ Integrante 1
+ Integrante 2

**Correos Electrónicos:**
+ Correo integrante 1
+ Correo integrante 2

**Fecha de Creación:** Octubre de 2024  
**Versión:** 1.0

---

## Descripción

Este notebook contiene el uso de modelos de regresión cargados para la evaluación de modelos de regresión de la asignatura de Fundamentos de Machine Learning de la carrera de Ingeniería en informática de DuocUC - Sede Concepción

# Uso de modelos

Acá debe cargar desde el archivo pickle cada variante y cargar el JSON con las entradas, generando así el JSON con las predicciones

## Variante 1 - Uso sólo de variables cuantitativas
"""

import requests
import pickle
import json
from io import BytesIO
import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier

# URL del archivo .pkl en GitHub
url = ""

# Descargar el archivo
response = requests.get(url)
model = pickle.load(BytesIO(response.content))

feature_names = ['PrimaryAssaultRifle', 'RLethalGrenadesThrown']
def predict_batch(input_data_list):
    # Convertir la lista de inputs en un DataFrame de pandas con los nombres de las características
    input_df = pd.DataFrame(input_data_list, columns=feature_names)

    # Hacer las predicciones
    predictions = model.predict(input_df)

    # Convertir los resultados a un formato serializable
    results = predictions.tolist()

    return [{"prediction": result} for result in results]

# Función para hacer predicciones en lote y almacenar el resultado en memoria
def predict_batch_and_store(input_json):
    results = predict_batch(input_json)
    results_json = json.dumps(results, indent=2)

    return results_json

import json
import random

# Lista para almacenar los 30 JSONs
json_list = []

# Generar 30 combinaciones
for i in range(30):
    input_json = {
        "PrimaryAssaultRifle": random.randint(0, 100),        # Valores entre 0 y 100
        "RLethalGrenadesThrown": random.randint(0, 5)       # Valores entre 0 y 5
    }
    json_list.append(input_json)
json_list

a = [{
        "PrimaryAssaultRifle": 90,
        "RLethalGrenadesThrown": 5
}]

# Hacer la predicción y almacenar el resultado
results = predict_batch_and_store(a)

print("Resultado:")
print(results)

# Puedes acceder al resultado almacenado usando la variable 'stored_result'

"""## Variante 2 - Uso de variables cuantitativas y categórica"""

# URL del archivo .pkl en GitHub
url = ""

# Descargar el archivo
response = requests.get(url)
model = pickle.load(BytesIO(response.content))

feature_names = ['PrimaryAssaultRifle', 'RLethalGrenadesThrown', 'PrimaryPistol']
def predict_batch(input_data_list):
    # Convertir la lista de inputs en un DataFrame de pandas con los nombres de las características
    input_df = pd.DataFrame(input_data_list, columns=feature_names)

    # Hacer las predicciones
    predictions = model.predict(input_df)

    # Convertir los resultados a un formato serializable
    results = predictions.tolist()

    return [{"prediction": result} for result in results]

# Función para hacer predicciones en lote y almacenar el resultado en memoria
def predict_batch_and_store(input_json):
    results = predict_batch(input_json)
    results_json = json.dumps(results, indent=2)

    return results_json

import json
import random

# Lista para almacenar los 30 JSONs
json_list = []

# Generar 30 combinaciones
for i in range(30):
    input_json = {
        "PrimaryAssaultRifle": random.randint(0, 100),        # Valores entre 0 y 100
        "RLethalGrenadesThrown": random.randint(0, 5),        # Valores entre 0 y 6
        "PrimaryPistol": random.choice([0, 1])                # Valores 0 o 1
    }
    json_list.append(input_json)
json_list

# Hacer la predicción y almacenar el resultado

a = [{
        "PrimaryAssaultRifle": 90,        # Valores entre 0 y 100
        "RLethalGrenadesThrown": 0,     # Valores entre 0 y 6
        "PrimaryPistol": 0              # Valores 0 o 1
}]
results = predict_batch_and_store(a)

print("Resultado:")
print(results)

# Puedes acceder al resultado almacenado usando la variable 'stored_result'